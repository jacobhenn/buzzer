{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/types.ts","../../node_modules/svelte/store/index.mjs","../../src/stores.ts","../../src/utils.ts","../../src/CommandBuilder.svelte","../../src/DisplaySingleHistEntry.svelte","../../src/DisplayHistory.svelte","../../src/SelectBuzzKey.svelte","../../src/SelectBuzzKeys.svelte","../../src/DisplayBuzzer.svelte","../../src/DisplaySingleScore.svelte","../../src/DisplayScores.svelte","../../src/HostUtils.svelte","../../src/Setup.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.31.2' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export var ClientState;\n(function (ClientState) {\n    ClientState[ClientState[\"Setup\"] = 0] = \"Setup\";\n    ClientState[ClientState[\"Contestant\"] = 1] = \"Contestant\";\n    ClientState[ClientState[\"Host\"] = 2] = \"Host\";\n    ClientState[ClientState[\"Operator\"] = 3] = \"Operator\";\n    ClientState[ClientState[\"Over\"] = 4] = \"Over\";\n})(ClientState || (ClientState = {}));\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { ClientState } from './types';\nimport { writable } from 'svelte/store';\nexport const contestants = writable([{ name: \"\", buzzKey: \"Space\", added: false, }]);\nexport const clientState = writable(ClientState.Setup);\nexport const inHistory = writable(false);\nexport const serverDown = writable(false);\nexport const closeMsg = writable(\"\");\nexport const closeCode = writable(0);\nexport const pointValuesIndex = writable(0);\nexport const state = writable({\n    buzzer: { state: \"Closed\", owner: null },\n    scores: {},\n    history: [],\n    ptsworth: 200\n});\n","export function range(start, end) {\n    return Array.from({ length: end - start + 1 }, (_, i) => i);\n}\nexport const socket = new WebSocket(`ws://${window.location.host}/ws`);\nexport function containsDuplicates(xs) {\n    return xs.length !== new Set(xs).size;\n}\nexport const buzzKeys = [\n    { code: \"Space\", name: \"Space\" },\n    { code: \"NumpadEnter\", name: \"Numpad Enter\" },\n    { code: \"ControlLeft\", name: \"Left Control\" },\n    { code: \"Numpad0\", name: \"Numpad 0\" },\n    { code: \"ShiftLeft\", name: \"Left Shift\" },\n    { code: \"ShiftRight\", name: \"Right Shift\" },\n    { code: \"Enter\", name: \"Enter\" },\n    { code: \"ControlRight\", name: \"Right Control\" }\n];\n","<script lang=\"ts\">\n    import { socket } from './utils';\n\n    let cmd = {};\n    let newkey = \"action\";\n    let newval = \"\";\n\n    let int = false;\n\n    function reset(): void {\n        cmd = {};\n        newkey = \"action\";\n        newval = \"\";\n        int = false;\n    }\n\n    function send(): void {\n        socket.send(JSON.stringify(cmd));\n        reset();\n    }\n\n    function append(): void {\n        cmd[newkey] = int ? parseInt(newval) : newval;\n        newkey = \"\";\n        newval = \"\";\n    }\n</script>\n\n<hr/>\n<u>send custom command</u><br/>\n{#each Object.entries(cmd) as [key, val]}\n    {key}: {val}<br/>\n{/each}\n\n<input bind:value={newkey}/>\n<input bind:value={newval}/>\n<button on:click={() => int = !int}>{int?\"☑\":\"☐\"} int</button>\n<br/>\n\n<button on:click={append}>add field</button>\n<button on:click={reset}>reset</button>\n<button on:click={send}>send</button>\n","<script lang=\"ts\">\n    import { socket } from './utils';\n    import { clientState, state } from './stores';\n\n    import { ClientState } from './types';\n\n    export let thisIndex: number;\n\n    $: thisDelta = $state.history[thisIndex].delta;\n    $: thisDeltaString = (thisDelta<0?\"\":\"+\") + thisDelta.toString();\n\n    function updateServerHistEntry(): void {\n        socket.send(JSON.stringify({\n            action: \"EditHistory\",\n            index: thisIndex,\n            delta: parseInt(thisDeltaString)\n        }));\n    }\n\n    function removeHistEntry(): void {\n        socket.send(JSON.stringify({\n            action: \"RemoveHistory\",\n            index: thisIndex\n        }));\n    }\n\n    function handleKeydown(event: { code: string }): void {\n        if (event.code === \"Enter\") {\n            updateServerHistEntry();\n        }\n    }\n</script>\n\n<span class=\"time\">\n    {$state.history[thisIndex].time[0].toString().padStart(2, \"0\")}:{$state.history[thisIndex].time[1].toString().padStart(2, \"0\")}\n</span>\n{$state.history[thisIndex].name}\n{#if $clientState === ClientState.Host}\n    <input class=\"hidden\"\n           bind:value={thisDeltaString}\n           on:blur={updateServerHistEntry}\n           on:keydown={handleKeydown}/>\n    <button class=\"remove\"\n            on:mousedown={removeHistEntry}>🞬</button>\n{:else}\n    {thisDeltaString} <!-- (thisDelta<0?\"\":\"+\") + thisDelta -->\n{/if}\n\n<style>\n    span.time {\n        color: #4c566a;\n    }\n\n    button.remove {\n        color: #bf616a;\n        background-color: #2e3440;\n        margin: 0px;\n        padding: 0px;\n    }\n\n    input.hidden {\n        margin: 0px;\n    }\n</style>\n","<script lang=\"ts\">\n    import { state, clientState, inHistory } from './stores';\n    import { range } from './utils';\n    import { ClientState } from './types';\n\n    import DisplaySingleHistEntry from './DisplaySingleHistEntry.svelte';\n\n    let nameFilter: string = \"\";\n\n    document.addEventListener(\"keydown\", function(e) {\n        if (e.key === \"b\" && document.activeElement.nodeName !== \"INPUT\") {\n            $inHistory = false;\n        }\n    });\n</script>\n\n<hr/>\n{#if $clientState === ClientState.Host}\n    <span class=\"header\">score history (click to edit)</span><br/>\n{:else}\n    <span class=\"header\">score history</span><br/>\n{/if}\n<button on:click={() => $inHistory = false}>\n    ← <u>b</u>ack to current scores\n</button><br/>\n<input bind:value={nameFilter} placeholder=\"filter by player name\"><br/>\n\n<div style=\"text-align:right;display:inline-block\">\n{#each range(0, $state.history.length-1) as i}\n    {#if nameFilter === \"\" || $state.history[i].name.startsWith(nameFilter)}\n        <DisplaySingleHistEntry thisIndex={i}/><br/>\n    {/if}\n{/each}\n</div>\n","<script lang=\"ts\">\n    import type { Contestant } from './types';\n    import { buzzKeys } from './utils';\n    import { contestants } from './stores';\n\n    export let contestant: Contestant;\n\n    function defocus() {\n        let elem: HTMLElement = document.activeElement as HTMLElement;\n        elem.blur();\n    }\n</script>\n\n<!-- svelte-ignore a11y-no-onchange -->\n<select bind:value={contestant.buzzKey} on:change={defocus}>\n    {#each buzzKeys as buzzKey}\n        <option value={buzzKey.code}>\n            {buzzKey.name}\n        </option>\n    {/each}\n    {#if !$contestants.some(c => c.name !== contestant.name\n                              && c.buzzKey === \"Click\")}\n        <option value=\"Click\">Tap/Click</option>\n    {/if}\n</select>\n","<script lang=\"ts\">\n    import { contestants } from './stores';\n\n    import SelectBuzzKey from './SelectBuzzKey.svelte';\n\n    $: keys = $contestants.map(p => p.buzzKey);\n    $: dups = keys.length !== new Set(keys).size;\n</script>\n\n{#if $contestants.length !== 0}\n    <hr/>\n    <span class=\"header\">buzz keys (click to change)</span><br/>\n{/if}\n\n{#each $contestants as c}\n    {c.name}:\n    <SelectBuzzKey bind:contestant={c}/><br/>\n{/each}\n\n{#if dups}\n    <strong style=\"color:#ebcb8b\">\n        some players have the same buzz key\n    </strong><br/>\n{/if}\n","<script lang=\"ts\">\n    import { closeMsg, closeCode, contestants, state, clientState } from './stores';\n    import { ClientState } from './types';\n\n    $: ownerHere = $contestants.some(c => c.name === $state.buzzer.owner);\n\n    function formatCloseCode(code: number): string {\n        if (code === 1000) return \"normal\"\n        else if (code === 1001) return \"shut down\"\n        else if (code === 1002) return \"protocol\"\n        else if (code === 1003) return \"unsuppourted data\"\n        else if (code === 1006) return \"abnormal\"\n        else if (code === 1008) return \"policy\"\n        else if (code === 1009) return \"size\"\n        else if (code === 1011) return \"internal error\"\n        else return code.toString()\n    }\n</script>\n\n<div id=\"topbar\"\n    class:ownerHere\n    class={$state.buzzer.state}\n    class:serverDown={$clientState === ClientState.Over}></div>\n<div id=\"state\"\n    class:ownerHere\n    class={$state.buzzer.state}\n    class:serverDown={$clientState === ClientState.Over}>\n    {#if $clientState === ClientState.Over}\n        the server has closed the connection\n        ({formatCloseCode($closeCode)})<br/>\n        {$closeMsg}\n    {:else if $state.buzzer.state === \"Closed\"}\n        the buzzer is closed\n    {:else if $state.buzzer.state === \"Open\"}\n        the buzzer is open\n    {:else}\n        {$state.buzzer.owner} has buzzed in\n    {/if}\n</div>\n\n{#if $state.buzzer.state === \"Open\"}\n    {#each $contestants as c}\n        {#if $state.scores[c.name].blocked}\n            <div style=\"color:#ebcb8b\">\n                <strong style=\"color:#ebcb8b\">{c.name}</strong>\n                has already buzzed in\n            </div>\n        {/if}\n    {/each}\n    {#each $contestants.filter(c => c.buzzKey === \"Click\"\n                                 && !$state.scores[c.name].blocked) as c}\n        <strong style=\"color:#a3be8c\">{c.name},</strong>\n        <span style=\"color:#a3be8c\">click or tap anywhere to buzz in</span>\n    {/each}\n{/if}\n{#if $clientState === ClientState.Contestant || $clientState === ClientState.Operator}\n    <br/>\n    <span id=\"ptsworth\">\n        for <strong>{$state.ptsworth}</strong> points\n    </span>\n{/if}\n\n<style>\n    #topbar {\n        height: 20px;\n        width: 100%;\n        margin: none;\n        padding: none;\n        transition: 0s;\n    }\n\n    #topbar.Open {\n        background-color: #a3be8c;\n        width: 0%;\n        transition: width 5s linear;\n    } #topbar.Closed {\n        background-color: #bf616a;\n    } #topbar.TakenBy {\n        background-color: #bf616a;\n    } #topbar.TakenBy.ownerHere {\n        background-color: #88c0d0;\n    }\n\n    #topbar.serverDown {\n        background-color: #b48ead;\n    }\n\n    #state {\n        font-weight: bold;\n        margin-top: 20px;\n    }\n\n    #state.Open {\n        color: #a3be8c;\n    } #state.Closed {\n        color: #bf616a;\n    } #state.TakenBy {\n        color: #bf616a;\n    } #state.TakenBy.ownerHere {\n        color: #88c0d0;\n    }\n\n    #state.serverDown {\n        color: #b48ead;\n    }\n</style>\n","<script lang=\"ts\">\n    import { socket } from './utils';\n    import { clientState, state, contestants } from './stores';\n    import { ClientState } from './types';\n\n    export let thisName: string;\n    export let thisScore: number;\n    let thisColor: string = \"eceff4\";\n\n    $: thisScoreString = thisScore.toString();\n\n    $: if ($state.scores[thisName].blocked) {\n        thisColor = \"ebcb8b\";\n    } else if ($contestants.some(c => c.name === thisName)) {\n        thisColor = \"88c0d0\";\n    } else {\n        thisColor = \"eceff4\";\n    }\n\n    $: fontWeight = ($contestants.some(c => c.name === thisName))\n        ? \"bold\" : \"normal\";\n\n    $: style = `color:#${thisColor};font-weight:${fontWeight}`;\n\n    function updateServerScore(): void {\n        let num = parseInt(thisScoreString);\n        if (isNaN(num)) return;\n\n        socket.send(JSON.stringify({\n            action: \"SetScore\",\n            name: thisName,\n            score: num\n        }));\n    }\n\n    function removePlayer(): void {\n        socket.send(JSON.stringify({\n            action: \"RemovePlayer\",\n            name: thisName,\n        }));\n    }\n\n    function handleKeydown(e: KeyboardEvent): void {\n        if (e.code == \"Enter\") {\n            updateServerScore();\n        }\n    }\n</script>\n\n<span {style}>\n    {thisName}:\n</span>\n{#if $clientState === ClientState.Host}\n    <input class=\"hidden\"\n           bind:value={thisScoreString}\n           on:focusout={updateServerScore}\n           on:keydown={handleKeydown}\n           {style}/>\n    <button class=\"remove\"\n            title=\"remove player\"\n            on:mousedown={removePlayer}>🞬</button>\n{:else}\n    <span {style}>{thisScore}</span>\n{/if}\n<br/>\n\n<style>\n    button.remove {\n        color: #bf616a;\n        background-color: #2e3440;\n        margin: 0px;\n        padding: 0px;\n    }\n</style>\n","<script lang=\"ts\">\n    import { state, clientState, inHistory } from './stores';\n    import { ClientState } from './types';\n    import DisplaySingleScore from './DisplaySingleScore.svelte';\n\n    document.addEventListener(\"keydown\", function(e) {\n        if (e.key === \"h\") {\n            $inHistory = true;\n        }\n    });\n</script>\n\n<hr/>\n{#if $clientState === ClientState.Host}\n    <span class=\"header\">scores (click to edit)</span><br/>\n{:else}\n    <span class=\"header\">scores</span><br/>\n{/if}\n<button on:click={() => $inHistory = true}>\n    view score <u>h</u>istory\n</button>\n<br/>\n\n<div style=\"text-align:right;display:inline-block\">\n{#each Object.entries($state.scores).sort((a, b) => a[1].score - b[1].score).reverse()\n    as player (player[0])}\n    <DisplaySingleScore thisName={player[0]} thisScore={player[1].score}/>\n{/each}\n</div>\n","<script lang=\"ts\">\n    import { state, pointValuesIndex } from './stores';\n    import { socket } from './utils';\n\n    const sJPointValues = [200, 400, 600,  800,  1000];\n    const dJPointValues = [400, 800, 1200, 1600, 2000];\n    let inDj = false;\n\n    $: pointsWorth = inDj\n        ? dJPointValues[$pointValuesIndex]\n        : sJPointValues[$pointValuesIndex];\n\n    $: socket.send(JSON.stringify({\n        action: \"SetPtsWorth\",\n        pts: pointsWorth\n    }));\n\n    function incrementPointsWorth(): void {\n        $pointValuesIndex++;\n        $pointValuesIndex %= 5;\n    }\n\n    function decrementPointsWorth(): void {\n        $pointValuesIndex--;\n    }\n\n    function endRound(): void {\n        socket.send(JSON.stringify({\n            action: \"EndRound\"\n        }));\n        incrementPointsWorth();\n    }\n\n    function correct(): void {\n        socket.send(JSON.stringify({\n            action: \"OwnerCorrect\"\n        }));\n        incrementPointsWorth();\n    }\n\n    function openBuzzer(): void {\n        // if (Object.entries($state.scores).every(c => c[1].blocked)) {\n        //     incrementPointsWorth();\n        // }\n        socket.send(JSON.stringify({\n            action: \"OpenBuzzer\"\n        }));\n    }\n\n    document.addEventListener(\"keydown\", function(event) {\n        if (document.activeElement.nodeName === \"INPUT\") {\n            return;\n        } else if ($state.buzzer.state === \"Open\" && event.key === \"e\") {\n            endRound();\n        } else if ($state.buzzer.state === \"Closed\" && event.key === \"o\") {\n            openBuzzer();\n        } else if ($state.buzzer.state === \"TakenBy\" && event.key === \"c\") {\n            correct();\n        } else if ($state.buzzer.state === \"TakenBy\" && event.key === \"i\") {\n            openBuzzer();\n        } else if (event.key === \"d\") {\n            inDj = !inDj;\n            $pointValuesIndex = 0;\n        } else if (event.key === \"+\" && $pointValuesIndex < 4) {\n            incrementPointsWorth();\n        } else if (event.key === \"-\" && $pointValuesIndex > 0) {\n            decrementPointsWorth();\n        }\n    });\n</script>\n\n<hr/>\n<span class=\"header\">host commands</span><br/>\n\npoints worth:\n<!-- svelte-ignore a11y-no-onchange -->\n<select type=\"number\"\n        bind:value={pointsWorth}>\n    {#each (inDj ? dJPointValues : sJPointValues) as p}\n        <option>{p}</option>\n    {/each}\n</select>\n\n<button on:mousedown={incrementPointsWorth}\n        disabled={$pointValuesIndex > 3}><u>+</u></button>\n<button on:mousedown={decrementPointsWorth}\n        disabled={$pointValuesIndex < 1}><u>-</u></button>\n\n<br/>\n<button on:mousedown={() => { inDj = !inDj; $pointValuesIndex = 0; }}>\n    {inDj ? \"☑\" : \"☐\"}\n    <u>d</u>ouble Jeopardy!\n</button>\n\n<br/>\n\n{#if $state.buzzer.state === \"Open\"}\n    <button class=\"large\" on:mousedown={endRound}><u>e</u>nd round early</button>\n{:else if $state.buzzer.state === \"Closed\"}\n    <button class=\"large\" on:mousedown={openBuzzer}><u>o</u>pen buzzer</button>\n{:else if $state.buzzer.state === \"TakenBy\"}\n    is <strong>{$state.buzzer.owner}</strong>\n    <button on:mousedown={correct}><u>c</u>orrect</button> or\n    <button on:mousedown={openBuzzer}><u>i</u>ncorrect</button>?\n{/if}\n","<script lang=\"ts\">\n    import { contestants, clientState, state } from './stores';\n    import { socket, buzzKeys } from './utils';\n\n    import { ClientState } from './types';\n\n    let amHost = false;\n\n    let buzzKeyIndex = $contestants.length;\n\n    function addContestant(): void {\n        $contestants =\n            [...$contestants,\n             { name: \"\", buzzKey:\n                 buzzKeys[buzzKeyIndex].code,\n               added: false\n             }\n            ];\n        buzzKeyIndex++;\n    }\n\n    function removeContestant(name: string): void {\n        for (let i = 0; i<$contestants.length; i++) {\n            if ($contestants[i].name === name) {\n                $contestants.splice(i, 1);\n                $contestants = $contestants;\n                buzzKeyIndex--;\n\n                if ($contestants[i].added) {\n                    socket.send(JSON.stringify({\n                        action: \"RemovePlayer\",\n                        name: $contestants[i].name\n                    }))\n                }\n\n                break;\n            }\n        }\n    }\n\n    function play(): void {\n        for (var c of $contestants) {\n            c.name = c.name.trim();\n        }\n\n        $contestants = $contestants.filter(c => c.name.length > 0);\n\n        for (const c of $contestants) {\n            if (!c.added) {\n                socket.send(JSON.stringify({\n                    action: \"AddPlayer\",\n                    name: c.name\n                }));\n\n                c.added = true;\n            }\n        };\n\n        $clientState = amHost ? ClientState.Host : ClientState.Contestant;\n    }\n\n    $: externDups = $contestants.filter(c => Object.entries($state.scores)\n        .some((p: [string, { score: number }]) => p[0] === c.name) && !c.added\n    );\n</script>\n\ncontestant(s), enter your name(s)<br/>\n<strong style=\"color:#88c0d0\">hosts do not need to enter their names</strong>\n<hr/>\n\n{#each $contestants as c}\n    <input bind:value={c.name}\n           disabled={c.added}\n           placeholder=\"enter your name\" maxlength=\"30\"/>\n    <button class=\"remove\"\n            title=\"remove contestant\"\n            on:click={() => removeContestant(c.name)}>🞬</button>\n    <br/>\n{/each}\n\n<button on:mousedown={addContestant}>add contestant</button>\n\n<br/>\n{#each externDups as d}\n    <span class=\"dup\">someone else is already named \"{d.name}\"</span>\n{/each}\n\n<hr/>\ndoes this device need host access?<br/>\n<button on:mousedown={() => amHost = !amHost}>\n    {amHost ? \"☑\" : \"☐\"}\n    host access\n</button>\n\n<hr/>\n<button class=\"large\" on:mousedown={play}\n        disabled={externDups.length > 0}>play</button>\n\n<button id=\"operator\" on:mousedown={() => {\n    $contestants = [];\n    $clientState = ClientState.Operator;\n}}>operator</button>\n\n<style>\n    .dup {\n        color: #bf616a;\n    }\n\n    button.remove {\n        color: #bf616a;\n        background-color: #2e3440;\n        margin: 0px;\n        padding: 0px;\n    }\n\n    button#operator {\n        opacity: 0;\n        font-size: 15pt;\n        position: fixed;\n        bottom: 0px;\n        left: 0px;\n    }\n\n    button#operator:hover {\n        opacity: 1;\n    }\n</style>\n","<script lang=\"ts\">\n    import {\n        clientState, state, contestants, pointValuesIndex,\n        inHistory, closeMsg, closeCode\n    } from './stores';\n\n    import { socket } from './utils';\n    import { Contestant, ClientState } from './types';\n\n    import CommandBuilder from './CommandBuilder.svelte';\n    import DisplayHistory from './DisplayHistory.svelte';\n    import SelectBuzzKeys from './SelectBuzzKeys.svelte';\n    import DisplayBuzzer  from './DisplayBuzzer.svelte';\n    import DisplayScores  from './DisplayScores.svelte';\n    import HostUtils      from './HostUtils.svelte';\n    import Setup          from './Setup.svelte';\n\n\n    function logHistory(n: string, s: number): void {\n        const d = new Date();\n        $state.history = [{\n            time: [d.getHours(), d.getMinutes()],\n            name: n,\n            delta: s\n        }, ...$state.history];\n    }\n\n    let timeoutID: number;\n\n    socket.onmessage = function(event) {\n        let cmd = JSON.parse(event.data);\n        let a = cmd.action;\n\n        if (a === \"SetScore\") {\n            let p = $state.scores[cmd.name];\n            logHistory(cmd.name, cmd.score - p.score);\n            p.score = cmd.score;\n        } else if (a === \"EndRound\") {\n            for (var p of Object.entries($state.scores)) {\n                p[1].blocked = false;\n            }\n            $state.buzzer.state = \"Closed\"\n            window.clearTimeout(timeoutID);\n        } else if (a === \"OpenBuzzer\") {\n            // If everyone's blocked, OpenBuzzer closes the buzzer instead.\n            let vals = Object.values($state.scores);\n            if (vals.length !== 0 && vals.every(p => p.blocked)) {\n                $state.buzzer.state = \"Closed\";\n                Object.values($state.scores).map(p => p.blocked = false);\n            } else {\n                $state.buzzer.state = \"Open\";\n            }\n            timeoutID = window.setTimeout(function() {\n                for (var p of Object.entries($state.scores)) {\n                    p[1].blocked = false;\n                }\n                $state.buzzer.state = \"Closed\";\n                $pointValuesIndex++;\n                $pointValuesIndex %= 5;\n            }, 5000);\n        } else if (a === \"AddPlayer\") {\n            $state.scores[cmd.name] = {score: 0, blocked: false};\n        } else if (a === \"RemovePlayer\") {\n            delete $state.scores[cmd.name];\n            $state.scores = $state.scores;\n            $contestants = $contestants.filter(c => c.name !== cmd.name);\n        } else if (a === \"Unblock\") {\n            $state.scores[cmd.name].blocked = false;\n        } else if (a === \"EditHistory\") {\n            let e = $state.history[cmd.index];\n            // How much did we add to/subtract from this player's score?\n            let diff = cmd.delta - e.delta;\n            e.delta = cmd.delta;\n\n            // Add that diff to the current score of this player\n            $state.scores[e.name].score += diff;\n        } else if (a === \"RemoveHistory\") {\n            let e = $state.history[cmd.index];\n\n            $state.scores[e.name].score -= e.delta;\n\n            $state.history.splice(cmd.index, 1);\n            $state.history = $state.history;\n        } else if (a === \"SetPtsWorth\") {\n            $state.ptsworth = cmd.pts;\n        } else if (a === \"OwnerCorrect\") {\n            let p = $state.scores[$state.buzzer.owner];\n            p.score += $state.ptsworth;\n            logHistory($state.buzzer.owner, $state.ptsworth);\n            Object.values($state.scores).map(p => p.blocked = false);\n            $state.buzzer.state = \"Closed\";\n        } else if (a === \"SetState\") {\n            $state = cmd.state;\n            const d = new Date();\n            const o = d.getTimezoneOffset() / 60;\n            for (let e of $state.history) {\n                e.time[0] += o;\n                e.time[0] %= 24;\n            }\n        } else if (a === \"Buzz\") {\n            $state.scores[cmd.name].blocked = true;\n            $state.buzzer = { state: \"TakenBy\", owner: cmd.name };\n            window.clearTimeout(timeoutID);\n        }\n    }\n\n    socket.onclose = function(e: CloseEvent) {\n        $clientState = ClientState.Over;\n        $closeMsg = e.reason;\n        $closeCode = e.code;\n    }\n\n    function buzz(c: Contestant): void {\n        if (!$state.scores[c.name].blocked) {\n            socket.send(JSON.stringify({\n                action: \"Buzz\",\n                name: c.name\n            }));\n        }\n    }\n\n    function clickBuzz(event: MouseEvent | TouchEvent): void {\n        let eventTarget = event.target as HTMLElement;\n        let eventSrcElement = event.srcElement as HTMLElement;\n\n        let forbiddenElements = [\"INPUT\", \"BUTTON\", \"SELECT\"];\n\n        if (forbiddenElements.includes(eventTarget.tagName)) { return; }\n        if (forbiddenElements.includes(eventSrcElement.tagName)) { return; }\n\n        for (const contestant of $contestants) {\n            if (contestant.buzzKey === \"Click\") {\n                buzz(contestant);\n            }\n        }\n    }\n\n    function keyBuzz(event: KeyboardEvent): void {\n        for (const contestant of $contestants) {\n            if (contestant.buzzKey === event.code) {\n                buzz(contestant);\n            }\n        }\n    }\n</script>\n\n<svelte:window on:mousedown={clickBuzz} on:keydown={keyBuzz} on:touchstart={clickBuzz}/>\n\n{#if $clientState === ClientState.Setup}\n    <Setup/>\n{:else if $clientState === ClientState.Operator}\n    <button id=\"setup\" on:click={() => $clientState = ClientState.Setup}>← setup</button>\n    <DisplayBuzzer/>\n    <CommandBuilder/>\n    {#if $inHistory}\n        <DisplayHistory/>\n    {:else}\n        <DisplayScores/>\n    {/if}\n{:else if $clientState !== ClientState.Over}\n    <button id=\"setup\" on:click={() => $clientState = ClientState.Setup}>← setup</button>\n    <DisplayBuzzer/>\n    <SelectBuzzKeys/>\n    {#if $clientState === ClientState.Host}\n        <HostUtils/>\n    {/if}\n    {#if $inHistory}\n        <DisplayHistory/>\n    {:else}\n        <DisplayScores/>\n    {/if}\n{:else}\n    <DisplayBuzzer/>\n    {#if $inHistory}\n        <DisplayHistory/>\n    {:else}\n        <DisplayScores/>\n    {/if}\n{/if}\n\n<div id=\"footer\">v5.4.0-dev.2</div>\n\n<style>\n    #footer {\n        color: #4c566a;\n        font-size: 15pt;\n        position: fixed;\n        bottom: 0px;\n        right: 0px;\n    }\n\n    #setup {\n        font-size: 1.8vw;\n        position: fixed;\n        left: 0px;\n        top: 20px;\n    }\n</style>\n","import App from './App.svelte';\nconst app = new App({\n    target: document.body,\n    props: {}\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","null_to_empty","value","set_store_value","ret","set","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","setProperty","select_option","select","option","__value","selected","select_value","selected_option","querySelector","toggle_class","toggle","classList","current_component","set_current_component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","globals","window","globalThis","global","outro_and_destroy_block","lookup","create_component","mount_component","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","skip_bound","ready","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","type","index","indexOf","splice","$$props","obj","$$set","keys","ClientState","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","s","invalidate","subscriber","contestants","buzzKey","added","clientState","Setup","inHistory","closeMsg","closeCode","pointValuesIndex","state","buzzer","owner","scores","history","ptsworth","range","end","_","socket","WebSocket","location","host","buzzKeys","code","entries","cmd","newkey","newval","int","reset","send","JSON","stringify","parseInt","time","toString","padStart","Host","thisIndex","updateServerHistEntry","action","delta","thisDeltaString","thisDelta","$state","startsWith","nameFilter","e","activeElement","nodeName","$inHistory","some","defocus","blur","contestant","undefined","$contestants","dups","size","formatCloseCode","blocked","Over","Contestant","Operator","ownerHere","thisName","thisScore","thisColor","updateServerScore","num","thisScoreString","isNaN","score","fontWeight","sort","reverse","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","n","old_indexes","new_blocks","new_lookup","deltas","child_ctx","get","Math","abs","will_move","did_move","first","new_block","old_block","new_key","old_key","sJPointValues","dJPointValues","inDj","incrementPointsWorth","$pointValuesIndex","decrementPointsWorth","endRound","correct","openBuzzer","pointsWorth","pts","amHost","buzzKeyIndex","removeContestant","externDups","trim","$clientState","timeoutID","logHistory","Date","getHours","getMinutes","buzz","onmessage","parse","clearTimeout","vals","values","every","setTimeout","diff","getTimezoneOffset","onclose","$closeMsg","reason","$closeCode","eventTarget","eventSrcElement","srcElement","forbiddenElements","includes","tagName","body"],"mappings":"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"}